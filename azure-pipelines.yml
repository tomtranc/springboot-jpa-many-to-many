# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- main

variables:
  # shared variables
  - group: ttran-release
  # Agent VM info
  - name: vmImageName
    value: 'ubuntu-latest'
  - name: currentDate
    value: $[ format('{0:yyyy}.{0:MM}.{0:dd}', pipeline.startTime) ] # cannot use this expression for short form vars
  # Container registry service connection established during pipeline creation
  - name: azureServiceConnection
    value: 'arm-subscription-sc'
  - name: containerRegistryServiceConnection
    value: 'ttranPipeline-sc'
  - name: imageRepository
    value: 'springboot-jpa-many-to-many'
  - name: imageTag
    value: '$(currentDate)-$(Build.SourceBranchName)-$(Build.SourceVersion)'
  - name: imageName
    value: '$(CONTAINER_REGISTRY)/$(imageRepository):$(imageTag)'
  - name: dockerfilePath
    value: '$(Build.SourcesDirectory)/Dockerfile'

stages:
  - stage: Build
    displayName: Build and push image
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: Maven@3
            inputs:
              mavenPomFile: 'pom.xml'
              mavenOptions: '-Xmx3072m'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.21'
              jdkArchitectureOption: 'x64'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              goals: 'package'

          - task: Docker@2
            displayName: Build and push an image to container registry
            inputs:
              command: 'buildAndPush' # 'buildAndPush' | 'build' | 'push' | 'login' | 'logout' | 'start' | 'stop'. Required. Command. Default: buildAndPush.
              containerRegistry: $(containerRegistryServiceConnection)
              repository: $(imageRepository)
              Dockerfile: $(dockerfilePath) # string. Required when command = build || command = buildAndPush. Dockerfile. Default: **/Dockerfile.
              tags: |
                $(imageTag)

          - bash: |
              docker images
              docker save -o target/image.tar $(imageName)
              ls -ltr
              ls -ltr target/
            displayName: Prepare image artifact

          - task: PublishBuildArtifacts@1
            displayName: 'Publish Image Artifact'
            condition: succeeded() # The condition argument specifies to run the task only when the previous task succeeds.
            inputs:
              pathToPublish: '$(System.DefaultWorkingDirectory)/target/image.tar' # wildcard are not supported
#              artifactName: 'ttranapp' # default artifact name is 'drop'

  - stage: Deploy
    displayName: Deploy to environment
    dependsOn: Build
    condition: succeeded()
    jobs:
      - deployment: Deployment
        pool:
          vmImage: $(vmImageName)
        environment:
          name: dev
          resourceType: VirtualMachine
          tags: web1
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop
                - script: |
                    echo "Current host: `hostname`"
                    container_name="app"
  
                    # Login to Azure Container Registry (if not already logged in)
                    az login --identity
                    az acr login --name $(CONTAINER_REGISTRY)
                    
                    # Pull the latest image from ACR
                    docker pull $(imageName)
  
                    # Stop and remove the existing container (if it exists)
                    docker stop $container_name || true
                    docker rm $container_name || true
  
                    # Run the new container
                    docker run --name $container_name -d -p 8080:8080 $(imageName)

      - job: DeployContainerApp
        displayName: Deploy to ACA
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: AzureContainerApps@1
            displayName: Deploy Azure Container App
            inputs:
              azureSubscription: $(azureServiceConnection) # Azure ARM service connection
              containerAppName: $(AZURE_ACA_NAME)
              resourceGroupName: $(AZURE_RG_NAME)
              imageToDeploy: $(imageName)