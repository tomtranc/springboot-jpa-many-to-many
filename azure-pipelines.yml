# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- main

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '8e0408ae-1bfb-46bd-8cc9-763f8c71df13'
  imageRepository: 'springboot-jpa-many-to-many/multiarch'
  containerRegistry: 'ttran-a9bufhazdagrd7hy.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  imageTag: 'springboot-jpa-many-to-many/multiarch:$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
  - stage: Build
    displayName: Build and push stage
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: Maven@3
            inputs:
              mavenPomFile: 'pom.xml'
              mavenOptions: '-Xmx3072m'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.21'
              jdkArchitectureOption: 'x64'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              goals: 'package'

          - task: Docker@2
            displayName: Build and push an image to container registry
            inputs:
              command: 'buildAndPush' # 'buildAndPush' | 'build' | 'push' | 'login' | 'logout' | 'start' | 'stop'. Required. Command. Default: buildAndPush.
              repository: $(imageRepository)
              Dockerfile: $(dockerfilePath) # string. Required when command = build || command = buildAndPush. Dockerfile. Default: **/Dockerfile.
              tags: |
                $(imageTag)
